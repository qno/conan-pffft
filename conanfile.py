from conans import ConanFile, CMake, tools
import os

class PffftConan(ConanFile):
    name = "Pffft"
    version = "default"
    license = "BSD"
    author = "Julien Pommier"
    url = "https://github.com/qno/conan-pffft"
    description = "PFFFT : a Pretty Fast FFT."

    settings = "os", "compiler", "build_type", "arch"
    generators = "cmake"

    options = {"shared": [True, False]}
    default_options = "shared=False"

    _pkg_name = "pffft"
    _libname = "pffft"

    def source(self):
        url = "https://bitbucket.org/jpommier/pffft/get/29e4f76ac53b.zip"
        self.output.info("Downloading {}".format(url))
        tools.get(url, sha256="bb10afba127904a0c6c553fa445082729b7d72373511bda1b12a5be0e03f318a")
        os.rename("jpommier-pffft-29e4f76ac53b",self._pkg_name)
        self._createCMakeLists()

    def build(self):
        cmake = CMake(self)
        cmake.configure(source_dir=self._pkg_name)
        cmake.build()

    def package(self):
        self.copy("*.h", dst="include", src=self._pkg_name)
        self.copy("*.lib", dst="lib", keep_path=False)
        self.copy("*.dll", dst="lib", keep_path=False)
        self.copy("*.so", dst="lib", keep_path=False)
        self.copy("*.dylib", dst="lib", keep_path=False)
        self.copy("*.a", dst="lib", keep_path=False)

    def package_info(self):
        self.cpp_info.libs = [self._libname]


    def _isVisualStudioBuild(self):
        return self.settings.os == "Windows" and self.settings.compiler == "Visual Studio"

    def _createCMakeLists(self):
        content = '''\
# THIS FILE WAS GENERATED BY CONAN RECIPE. DO NOT EDIT THIS FILE!
cmake_minimum_required(VERSION 3.5)
project(Pffft)

include(${{CMAKE_BINARY_DIR}}/conanbuildinfo.cmake)
conan_basic_setup()

set(LIBPFFFT "{}")
set(SOURCES pffft/pffft.c pffft/fftpack.c)
add_library(${{LIBPFFFT}} ${{SOURCES}})


# macos gcc-4.2 -o test_pffft -arch x86_64 -O3 -Wall -W pffft.c test_pffft.c fftpack.c -L/usr/local/lib -I/usr/local/include/ -DHAVE_VECLIB -framework veclib -DHAVE_FFTW -lfftw3f
#       gcc -o test_pffft -DHAVE_FFTW -DHAVE_VECLIB -O3 -Wall -W pffft.c test_pffft.c fftpack.c -L/usr/local/lib -I/usr/local/include/ -lfftw3f -framework veclib
# linux gcc -o test_pffft -DHAVE_FFTW -msse2 -O3 -Wall -W pffft.c test_pffft.c fftpack.c -L$HOME/local/lib -I$HOME/local/include/ -lfftw3f -lm
#       gcc -o test_pffft -DHAVE_FFTW -msse -mfpmath=sse -O3 -Wall -W pffft.c test_pffft.c fftpack.c -L/usr/local/lib -I/usr/local/include/ -lfftw3f -lm
#       gcc -o test_pffft -DHAVE_FFTW -msse -mfpmath=sse -O3 -Wall -W pffft.c test_pffft.c fftpack.c -L/usr/local/lib -I/usr/local/include/ -lfftw3f -lm
# linux arm gcc-4.7 -O3 -DHAVE_FFTW -march=armv7-a -mtune=cortex-a9 -mfloat-abi=hard -mfpu=neon -ffast-math test_pffft.c pffft.c -o test_pffft_arm fftpack.c -lm -I/usr/local/include/ -L/usr/local/lib/ -lfftw3f
#           clang -O3 -DHAVE_FFTW -march=armv7-a -mtune=cortex-a9 -mfloat-abi=hard -mfpu=neon -ffast-math test_pffft.c pffft.c -o test_pffft_arm fftpack.c -lm -I/usr/local/include/ -L/usr/local/lib/ -lfftw3f
# ipad   xxx
# nvidia xxx
# windows cl /Ox -D_USE_MATH_DEFINES /arch:SSE test_pffft.c pffft.c fftpack.c

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
   target_compile_options (${{LIBPFFFT}} PRIVATE -msse -mfpmath=sse)
endif ()

if (MSVC)
   # _USE_MATH_DEFINES needed for M_PI
   target_compile_definitions (${{LIBPFFFT}} PRIVATE _USE_MATH_DEFINES)
endif ()

'''.format(self._libname)

        self.output.info("create CMakeLists.txt file")
        cmake_file = os.path.join(self._pkg_name, "CMakeLists.txt")
        f = open(cmake_file, "w+")
        f.write(content)
        f.close()
